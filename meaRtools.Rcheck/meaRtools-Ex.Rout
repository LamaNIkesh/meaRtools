
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "meaRtools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "meaRtools-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('meaRtools')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("IGM.aggregate.features")
> ### * IGM.aggregate.features
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aggregate_features
> ### Title: Aggregate Feature Data
> ### Aliases: aggregate_features
> ### Keywords: MEA Aggregate
> 
> ### ** Examples
> 
> 	data("S")
> 	data("parameters")
> 	s<-list()
> 	s[[1]]<-S
> 	spike_features = suppressWarnings( aggregate_features(s, "spike", parameters))
> 	ns_features = suppressWarnings( aggregate_features(s, "ns", parameters) )
> 	burst_features = suppressWarnings( aggregate_features(s, "burst", parameters) )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IGM.aggregate.features", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("IGM.plot.active.wells.network.spikes")
> ### * IGM.plot.active.wells.network.spikes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_active_wells_network_spikes
> ### Title: plot_active_wells_network_spikes
> ### Aliases: plot_active_wells_network_spikes
> ### Keywords: network spikes
> 
> ### ** Examples
> 
> data("S") 
> data('parameters')
> nspikes <- calculate.network.spikes( S, parameters$sur ,parameters$ns.N, parameters$ns.T )
> ## pdf(file=NSPlotPath)
> ## xyplot.network.spikes(nspikes)	
> ## plot_active_wells_network_spikes(nspikes)
> ## dev.off()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IGM.plot.active.wells.network.spikes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("IGM.plot.plate.summary.for.bursts")
> ### * IGM.plot.plate.summary.for.bursts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_plate_summary_for_bursts
> ### Title: Plot burst features
> ### Aliases: plot_plate_summary_for_bursts
> ### Keywords: distribution burst
> 
> ### ** Examples
> 
> data("S")  
> #plot_plate_summary_for_bursts(S,"/Analysis")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IGM.plot.plate.summary.for.bursts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("S")
> ### * S
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: S
> ### Title: example 'S' object
> ### Aliases: S
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data('S')
> names(S)
 [1] "channels"       "spikes"         "nspikes"        "NCells"        
 [5] "meanfiringrate" "file"           "layout"         "rates"         
 [9] "unit.offsets"   "rec_time"       "goodwells"      "treatment"     
[13] "size"           "units"          "dose"           "well"          
[17] "nAE"            "cw"             "parameters"     "timepoint"     
[21] "allb"           "bs"             "ns.all"         "isis"          
[25] "mean_isis"      "sd_isis"        "well_stats"    
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("S", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calc.burst.distributions")
> ### * calc.burst.distributions
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calc_burst_distributions
> ### Title: calculate and plot burst featues distributions
> ### Aliases: calc_burst_distributions
> ### Keywords: distributions IBI frequency burst
> 
> ### ** Examples
> 
> # Load exapmple of recording Robject (MEA data structure)
> data("S")  
> feature="IBI"; 
> #calc_burst_distributions(S, min_vals = 15, xlimit = 20, bins_in_sec = 5, 
> #feature = feature, per_well = 0, outputdir = "/Analysis")
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calc.burst.distributions", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calc.burst.summary")
> ### * calc.burst.summary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calc_burst_summary
> ### Title: Calculate average and standard deviation of the bursting
> ###   features.
> ### Aliases: calc_burst_summary
> ### Keywords: burst frequency duration bursts_per_min IBI isi
> 
> ### ** Examples
> 
> # Load exapmple of recording Robject (MEA data structure)
> data("S")  
> S$bs<-calc_burst_summary(S)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calc.burst.summary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calculate_isis")
> ### * calculate_isis
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calculate_isis
> ### Title: Calculate inter spike intervals
> ### Aliases: calculate_isis
> ### Keywords: isis inter spike interval
> 
> ### ** Examples
> 
> data("S")  
> S <- calculate_isis(S)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calculate_isis", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compute_mean_firingrate_by_well")
> ### * compute_mean_firingrate_by_well
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compute_mean_firingrate_by_well
> ### Title: mean.firingrate.by.well
> ### Aliases: compute_mean_firingrate_by_well
> ### Keywords: spikes mfr
> 
> ### ** Examples
> 
> data("S") 
> 
> res<-compute_mean_firingrate_by_well(S)
> res[1:4,]
   well meanfiringrate meanfiringrate_per_well div
B2   B2      15.701876               219.82626   1
B3   B3      21.083907               337.34251   1
B4   B4       6.507468                91.10456   1
B5   B5       3.213893                32.13893   1
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compute_mean_firingrate_by_well", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dist.perm")
> ### * dist.perm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dist_perm
> ### Title: Burst distribution permutations
> ### Aliases: dist_perm
> ### Keywords: distribution permutation
> 
> ### ** Examples
> 
> #    result <- dist_perm(distributionFilePath,10000,"WT","KO")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dist.perm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("filter.wells")
> ### * filter.wells
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: filter_wells
> ### Title: Filter wells
> ### Aliases: filter_wells
> ### Keywords: filter well
> 
> ### ** Examples
> 
> 
> 
> 	#data("S")
> 	#data("parameters")
> 	#s<-list(); s[[1]]<-S
> 	# spike.features<-aggregate_features(s, feat_type="spike", parameters )
> 	# nae = spike.features$nAE
>   # filtered.spike.features = lapply(spike.features, function(x) filter_wells(x, nae))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("filter.wells", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("generate.raster.plot")
> ### * generate.raster.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: generate.raster.plot
> ### Title: generate.raster.plot
> ### Aliases: generate.raster.plot
> ### Keywords: utility spikes
> 
> ### ** Examples
> 
> ##generate.raster.plot(RobjectFile=NULL,
> #                      well.for.raster=NULL, 
> #                      interval.for.raster=NULL,
> #                      show.bursts=F, 
> #                      show.burst.number=F, 
> #                      show.networkspikes=F,
> #                      show.ns.number=F,
> #                      show.nb=F,
> #                      window.size=NULL )
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("generate.raster.plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.burst.info")
> ### * get.burst.info
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_burst_info
> ### Title: get burst feature information
> ### Aliases: get_burst_info
> ### Keywords: burst IBI duration
> 
> ### ** Examples
> 
> data("S")  
> S$allb[[1]]
     beg end     IBI len     durn mean.isis SI
[1,]   6  24      NA  19  3.33952 0.1855289  1
[2,]  27  45 0.99424  19  2.67008 0.1483378  1
[3,]  49  61 1.33016  13  2.00240 0.1668667  1
[4,]  68  88 2.33288  21  2.68016 0.1340080  1
[5,]  92 114 1.00024  23  2.68552 0.1220691  1
[6,] 124 428 2.33936 305 35.80480 0.1177789  1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.burst.info", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.data")
> ### * get.data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.data
> ### Title: get.data
> ### Aliases: get.data
> ### Keywords: s-object
> 
> ### ** Examples
> 
> ## get.data(caption="Please select a spike-list file for analysis")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.experimental.log.file")
> ### * get.experimental.log.file
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.experimental.log.file
> ### Title: get.experimental.log.file
> ### Aliases: get.experimental.log.file
> ### Keywords: experimental log
> 
> ### ** Examples
> 
> ##masterChemFile<-paste0( system.file(package = "meaRtools"),
> #"/data",
> #"/exampleRecording_1012016_plate1_expLog.csv" )
>       
> ##spike.list.file<-paste0( system.file(package = "meaRtools"),
> #"/data",
> #"/exampleRecording_1012016_plate1_DIV1_spike_list.csv" )
> 
> ##plate.data<-getxperimental.log.file( file=spike.list.file, masterChemFile = masterChemFile )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.experimental.log.file", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.num.AE")
> ### * get.num.AE
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.num.AE
> ### Title: get.num.AE
> ### Aliases: get.num.AE
> ### Keywords: spikes
> 
> ### ** Examples
> 
> data("S") # load data
> b<-get.num.AE(S)
> b$nAE
A1 A2 A3 A4 A5 A6 A7 A8 B1 B2 B3 B4 B5 B6 B7 B8 C1 C2 C3 C4 C5 C6 C7 C8 D1 D2 
 0  0  0  0  0  0  0  0  0 14 16 14 10 11 12  0  0 14 13  0  0 10 13  0  0 15 
D3 D4 D5 D6 D7 D8 E1 E2 E3 E4 E5 E6 E7 E8 F1 F2 F3 F4 F5 F6 F7 F8 
15  0  1 12 12  0  0 16 16  0 11 14 14  0  0  0  0  0  0  0  0  0 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.num.AE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.wt")
> ### * get.wt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.wt
> ### Title: Get WT
> ### Aliases: get.wt
> ### Keywords: wt treatment
> 
> ### ** Examples
> 
> 	data("S")
> 	s<-list()
> 	s[[1]]<-S
> 	##wt <- get.wt(s)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.wt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_file_basename")
> ### * get_file_basename
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_file_basename
> ### Title: get_file_basename
> ### Aliases: get_file_basename
> ### Keywords: spike-list
> 
> ### ** Examples
> 
> 
> data("S") # load data
> get_file_basename(S$file)
[1] "exampleRecording_1012016_plate1_DIV1"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_file_basename", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_project_plate_name")
> ### * get_project_plate_name
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_project_plate_name
> ### Title: get_project_plate_name
> ### Aliases: get_project_plate_name
> ### Keywords: utility
> 
> ### ** Examples
> 
> data("S") # load data
> get_project_plate_name(S$file)
[1] "exampleRecording_1012016_plate1"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_project_plate_name", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("igm_write_ui_to")
> ### * igm_write_ui_to
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: igm_write_ui_to_log
> ### Title: igm_write_ui_to_log
> ### Aliases: igm_write_ui_to_log
> ### Keywords: log
> 
> ### ** Examples
> 
> # igm_write_ui_to_log(files='/Desktop/logfile.txt',parameter_list, new_file=F )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("igm_write_ui_to", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isi")
> ### * isi
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isi
> ### Title: isi
> ### Aliases: isi
> ### Keywords: isi spikes interval
> 
> ### ** Examples
> 
> 
> data("S") # load data
> b<-isi(S$spikes[[1]])
> S$spikes[[1]][1:4]
[1] 0.51008 1.81208 1.84136 2.17488
> b[1:3]
[1] 1.30200 0.02928 0.33352
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isi", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("load_spikelist")
> ### * load_spikelist
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: load_spikelist
> ### Title: Load Robject File
> ### Aliases: load_spikelist
> ### Keywords: Rdata s
> 
> ### ** Examples
> 
> #    s1 <- load_spikelist(dir to saved Rdata file)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("load_spikelist", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mi.find.bursts")
> ### * mi.find.bursts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mi.find.bursts
> ### Title: Find bursts
> ### Aliases: mi.find.bursts
> ### Keywords: maximum interval burst IBI allb
> 
> ### ** Examples
> 
> data("S")  
> allb <- lapply(S$spikes, mi.find.bursts, S$parameters$mi.par )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mi.find.bursts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("parameters")
> ### * parameters
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: parameters
> ### Title: A list of parameters with default values that user can
> ###   customize.
> ### Aliases: parameters
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(parameters)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("parameters", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("permute.features.and.plot")
> ### * permute.features.and.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: permute.features.and.plot
> ### Title: Write PDF
> ### Aliases: permute.features.and.plot
> ### Keywords: MEA analysis PDF
> 
> ### ** Examples
> 
> 	data("S")
> 	#spike.features<-aggregate_features(S, feat_type="spike" )
> 	#wt <- "untreated"
> 	#output_dir = getwd()
> 	#permute.features.and.plot(S, wt, np, spike.features, "spikes", output_dir)
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("permute.features.and.plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_mean_firingrate_by_eletrode_by_div")
> ### * plot_mean_firingrate_by_eletrode_by_div
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_mean_firingrate_by_eletrode_by_div
> ### Title: plot.mean.firingrate.by.eletrode.by.div
> ### Aliases: plot_mean_firingrate_by_eletrode_by_div
> ### Keywords: firing rate
> 
> ### ** Examples
> 
> 
> data("S") 
> s<-list()
> s[[1]]<-S
> #plot.mean.firingrate.by.eletrode.by.div(s)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_mean_firingrate_by_eletrode_by_div", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_mean_firingrate_by_well_by_div")
> ### * plot_mean_firingrate_by_well_by_div
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_mean_firingrate_by_well_by_div
> ### Title: plot.mean.firingrate.by.well.by.div
> ### Aliases: plot_mean_firingrate_by_well_by_div
> ### Keywords: firing rate spikes
> 
> ### ** Examples
> 
> data("S") 
> s<-list()
> s[[1]]<-S
> #plot.mean.firingrate.by.well.by.div(s)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_mean_firingrate_by_well_by_div", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_plate_summary_for_spikes")
> ### * plot_plate_summary_for_spikes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_plate_summary_for_spikes
> ### Title: plot.plate.summary.for.spikes
> ### Aliases: plot_plate_summary_for_spikes
> ### Keywords: spikes
> 
> ### ** Examples
> 
> 
> data("S") 
> s<-list()
> s[[1]]<-S
> ## plot.plate.summary.for.spikes(s, outputdir="/Desktop")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_plate_summary_for_spikes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read_spikelist")
> ### * read_spikelist
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read_spikelist
> ### Title: Axion convert spk_list to r_object
> ### Aliases: read_spikelist
> ### Keywords: spike_list r_object Axion
> 
> ### ** Examples
> 
> 
> ##masterChemFile<-paste0( system.file(package = "meaRtools"),
> #"/data",
> #"/exampleRecording_1012016_plate1_expLog.csv" )
>       
> ##spike_list_file<-paste0( system.file(package = "meaRtools"),
> #"/data",
> #"/exampleRecording_1012016_plate1_DIV1_spike_list.csv" )
> 
> ##title<-strsplit(basename(spike_list_file), ".csv")[[1]][1]
> # get plate chemical info for each file in the list
> 
> ##plate_chem_info<-chem_info_2( file=spike_list_file, masterChemFile = masterChemFile )
> 
> ##r_object_file_name<-read_spikelist(key=title, 
> #                                                  spk_list_file=plate_chem_info, 
> #                                                  chem_info=plate_chem_info,r_object_dir="/") 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read_spikelist", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("remove_spikes")
> ### * remove_spikes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: remove_spikes
> ### Title: remove_spikes
> ### Aliases: remove_spikes
> ### Keywords: spikes
> 
> ### ** Examples
> 
> data("S") # load data
> r<-remove_spikes(S, c(-1, -2))
> 
> S$channels[1:2] # original 's' object first 2 channels
[1] "B2_11" "B2_12"
> r$channels[1:2] # first 2 channels have been removed
[1] "B2_13" "B2_14"
> 
> S$NCells # original count of channels
[1] 253
> r$NCells # count of channels after 2 channels removed
[1] 251
> 
> S$nspikes # original spike count of first 2 channels
B2_11 B2_12 B2_13 B2_14 B2_21 B2_22 B2_23 B2_24 B2_31 B2_32 B2_33 B2_41 B2_43 
  428  3451  1998   865   506   590   569     3   346  1891  1601   589     3 
B2_44 B3_11 B3_12 B3_13 B3_14 B3_21 B3_22 B3_23 B3_24 B3_31 B3_32 B3_33 B3_34 
  402  3699   358   243  3925   642   566  3196   822   515  1602  2382   227 
B3_41 B3_42 B3_43 B3_44 B4_11 B4_12 B4_13 B4_14 B4_22 B4_23 B4_24 B4_31 B4_32 
   14   787  1304    39  1032   538   208     5    15     2     2   657   615 
B4_33 B4_34 B4_41 B4_43 B4_44 B5_11 B5_13 B5_21 B5_23 B5_31 B5_32 B5_34 B5_41 
 1007   721    19   269   398   359   366    73   373    49    32   435    54 
B5_42 B5_44 B6_12 B6_13 B6_21 B6_22 B6_24 B6_32 B6_34 B6_41 B6_42 B6_43 B6_44 
   49   146    15   198    23  1278   530   805    19     8   291   529   372 
B7_11 B7_12 B7_13 B7_14 B7_21 B7_22 B7_23 B7_24 B7_32 B7_34 B7_41 B7_43 C2_11 
  101    21   246   798    33   183   214   508   143   216   149    98   971 
C2_12 C2_13 C2_14 C2_22 C2_23 C2_24 C2_31 C2_32 C2_33 C2_34 C2_41 C2_43 C2_44 
 1675   365  2249   803    99   308  1212    21   615   216    83   970   369 
C3_11 C3_12 C3_13 C3_14 C3_21 C3_23 C3_24 C3_31 C3_32 C3_33 C3_34 C3_41 C3_42 
 1548  1302   241  2692  1656   101  2340     2   953   834   207  1425   449 
C6_11 C6_12 C6_13 C6_21 C6_22 C6_31 C6_41 C6_42 C6_43 C6_44 C7_11 C7_12 C7_13 
    8   280    56   270    34   145   223   186    14   102   543   517   160 
C7_14 C7_21 C7_23 C7_24 C7_32 C7_34 C7_41 C7_42 C7_43 C7_44 D2_11 D2_12 D2_13 
    2    71   218     9     7   550    30     5    75    82  2925  3838  3455 
D2_14 D2_21 D2_22 D2_23 D2_31 D2_32 D2_33 D2_34 D2_41 D2_42 D2_43 D2_44 D3_12 
 1370  1329     4    11   564    26   999  1184   928  2095    79  1365    77 
D3_13 D3_14 D3_21 D3_22 D3_23 D3_24 D3_31 D3_32 D3_33 D3_34 D3_41 D3_42 D3_43 
 3985  1792  2868  1410  1017   658  2898  2968  2633   120  3277   152  1372 
D3_44 D5_21 D6_12 D6_13 D6_14 D6_22 D6_23 D6_24 D6_32 D6_33 D6_34 D6_41 D6_42 
  706     4     2   420     3     4   123   614   345   232   430   246   297 
D6_44 D7_11 D7_12 D7_14 D7_22 D7_23 D7_24 D7_31 D7_33 D7_41 D7_42 D7_43 D7_44 
  322   245    48   931    58   301    71   163   230    34    24   330   470 
E2_11 E2_12 E2_13 E2_14 E2_21 E2_22 E2_23 E2_24 E2_31 E2_32 E2_33 E2_34 E2_41 
  311     3   347  2222   894   732    33  2217   430  1514    72   819   178 
E2_42 E2_43 E2_44 E3_11 E3_12 E3_13 E3_14 E3_21 E3_22 E3_23 E3_24 E3_31 E3_32 
 1327   480   176  1097   280  5366    20   145   259  1157     6  1511   360 
E3_33 E3_34 E3_41 E3_42 E3_43 E3_44 E5_11 E5_14 E5_21 E5_22 E5_23 E5_24 E5_31 
 1551  2003  2660   248   505   109  1038  1479   685   829    23   391   657 
E5_33 E5_41 E5_42 E5_44 E6_11 E6_12 E6_13 E6_21 E6_22 E6_23 E6_24 E6_31 E6_32 
  312     8    44    69   246   849    32    28     9   969    22  1517     4 
E6_33 E6_34 E6_41 E6_42 E6_43 E7_11 E7_13 E7_14 E7_21 E7_22 E7_23 E7_24 E7_31 
    2    12   984    16   374   129   250    10    55    17   433   805   657 
E7_32 E7_33 E7_34 E7_41 E7_42 E7_43 
   10    22  1072   111    80   673 
> r$nspikes # spike count of first 2 channels after 2 channels removed
B2_13 B2_14 B2_21 B2_22 B2_23 B2_24 B2_31 B2_32 B2_33 B2_41 B2_43 B2_44 B3_11 
 1998   865   506   590   569     3   346  1891  1601   589     3   402  3699 
B3_12 B3_13 B3_14 B3_21 B3_22 B3_23 B3_24 B3_31 B3_32 B3_33 B3_34 B3_41 B3_42 
  358   243  3925   642   566  3196   822   515  1602  2382   227    14   787 
B3_43 B3_44 B4_11 B4_12 B4_13 B4_14 B4_22 B4_23 B4_24 B4_31 B4_32 B4_33 B4_34 
 1304    39  1032   538   208     5    15     2     2   657   615  1007   721 
B4_41 B4_43 B4_44 B5_11 B5_13 B5_21 B5_23 B5_31 B5_32 B5_34 B5_41 B5_42 B5_44 
   19   269   398   359   366    73   373    49    32   435    54    49   146 
B6_12 B6_13 B6_21 B6_22 B6_24 B6_32 B6_34 B6_41 B6_42 B6_43 B6_44 B7_11 B7_12 
   15   198    23  1278   530   805    19     8   291   529   372   101    21 
B7_13 B7_14 B7_21 B7_22 B7_23 B7_24 B7_32 B7_34 B7_41 B7_43 C2_11 C2_12 C2_13 
  246   798    33   183   214   508   143   216   149    98   971  1675   365 
C2_14 C2_22 C2_23 C2_24 C2_31 C2_32 C2_33 C2_34 C2_41 C2_43 C2_44 C3_11 C3_12 
 2249   803    99   308  1212    21   615   216    83   970   369  1548  1302 
C3_13 C3_14 C3_21 C3_23 C3_24 C3_31 C3_32 C3_33 C3_34 C3_41 C3_42 C6_11 C6_12 
  241  2692  1656   101  2340     2   953   834   207  1425   449     8   280 
C6_13 C6_21 C6_22 C6_31 C6_41 C6_42 C6_43 C6_44 C7_11 C7_12 C7_13 C7_14 C7_21 
   56   270    34   145   223   186    14   102   543   517   160     2    71 
C7_23 C7_24 C7_32 C7_34 C7_41 C7_42 C7_43 C7_44 D2_11 D2_12 D2_13 D2_14 D2_21 
  218     9     7   550    30     5    75    82  2925  3838  3455  1370  1329 
D2_22 D2_23 D2_31 D2_32 D2_33 D2_34 D2_41 D2_42 D2_43 D2_44 D3_12 D3_13 D3_14 
    4    11   564    26   999  1184   928  2095    79  1365    77  3985  1792 
D3_21 D3_22 D3_23 D3_24 D3_31 D3_32 D3_33 D3_34 D3_41 D3_42 D3_43 D3_44 D5_21 
 2868  1410  1017   658  2898  2968  2633   120  3277   152  1372   706     4 
D6_12 D6_13 D6_14 D6_22 D6_23 D6_24 D6_32 D6_33 D6_34 D6_41 D6_42 D6_44 D7_11 
    2   420     3     4   123   614   345   232   430   246   297   322   245 
D7_12 D7_14 D7_22 D7_23 D7_24 D7_31 D7_33 D7_41 D7_42 D7_43 D7_44 E2_11 E2_12 
   48   931    58   301    71   163   230    34    24   330   470   311     3 
E2_13 E2_14 E2_21 E2_22 E2_23 E2_24 E2_31 E2_32 E2_33 E2_34 E2_41 E2_42 E2_43 
  347  2222   894   732    33  2217   430  1514    72   819   178  1327   480 
E2_44 E3_11 E3_12 E3_13 E3_14 E3_21 E3_22 E3_23 E3_24 E3_31 E3_32 E3_33 E3_34 
  176  1097   280  5366    20   145   259  1157     6  1511   360  1551  2003 
E3_41 E3_42 E3_43 E3_44 E5_11 E5_14 E5_21 E5_22 E5_23 E5_24 E5_31 E5_33 E5_41 
 2660   248   505   109  1038  1479   685   829    23   391   657   312     8 
E5_42 E5_44 E6_11 E6_12 E6_13 E6_21 E6_22 E6_23 E6_24 E6_31 E6_32 E6_33 E6_34 
   44    69   246   849    32    28     9   969    22  1517     4     2    12 
E6_41 E6_42 E6_43 E7_11 E7_13 E7_14 E7_21 E7_22 E7_23 E7_24 E7_31 E7_32 E7_33 
  984    16   374   129   250    10    55    17   433   805   657    10    22 
E7_34 E7_41 E7_42 E7_43 
 1072   111    80   673 
> 
> # OR keep only first 2 channels
> t<-remove_spikes(S, c(1, 2))
> t$channels
[1] "B2_11" "B2_12"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("remove_spikes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("si_find_bursts")
> ### * si_find_bursts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: si_find_bursts
> ### Title: Find bursts
> ### Aliases: si_find_bursts
> ### Keywords: poisson surprise burst
> 
> ### ** Examples
> 
> data("S")  
> allb <- lapply(S$spikes, si_find_bursts, S$parameters$s.min )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("si_find_bursts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("write.features.to.files")
> ### * write.features.to.files
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: write_features_to_files
> ### Title: Write feature data to an output file
> ### Aliases: write_features_to_files
> ### Keywords: spikes bursts network features print
> 
> ### ** Examples
> 
> 	data("S")
> 	s<-list()
> 	s[[1]]<-S
>   spike.features = aggregate_features(s, "spike")
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
Warning in mean.default(isis_all) :
  argument is not numeric or logical: returning NA
> 
> #  write_features_to_files(s, spike.features, analysis$output_dir, "spikes")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("write.features.to.files", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("write.plate.summary.for.bursts")
> ### * write.plate.summary.for.bursts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: write_plate_summary_for_bursts
> ### Title: Prints bursting features
> ### Aliases: write_plate_summary_for_bursts
> ### Keywords: bursts IBI duration frequency
> 
> ### ** Examples
> 
> data("S")  
> d<-dir.create(paste0(getwd(),"/Analysis") )
> s<-list(); s[[1]]<-S
> write_plate_summary_for_bursts(s, paste0(getwd() ) )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("write.plate.summary.for.bursts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("write_plate_summary_for_spikes")
> ### * write_plate_summary_for_spikes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: write_plate_summary_for_spikes
> ### Title: write_plate_summary_for_spikes
> ### Aliases: write_plate_summary_for_spikes
> ### Keywords: spikes
> 
> ### ** Examples
> 
> data("S") 
> s<-list()
> s[[1]]<-S
> ## path<-system.file()
> ## write_plate_summary_for_spikes(s , path)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("write_plate_summary_for_spikes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.851 0.91 8.706 0.003 0.001 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
